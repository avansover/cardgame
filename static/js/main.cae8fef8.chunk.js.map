{"version":3,"sources":["Components/Login.js","Components/WarRoom.js","Components/EndPage.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","nameEnter","ev","name","target","value","setState","enteredName","login","state","length","console","log","status","login1","this","redirect1","push","to","onChange","type","onClick","Component","WarRoom","nextCard","tempCardInd","cardInd","compCard","CompCardDB1","playerCard","playerCardDB1","tempCompPoints","compPoints","tempPlayerPoints","playerPoints","winLose","nextCard1","redirect","style","display","justifyContent","msFlexDirection","EndPage","playagain","playagain1","playerDB1","victoryNum","lossesNum","App","login2","status1","enteredName1","tempPDB","playerDB","playerName","playNum","shuffle","tempTCDB","totalCardDB","j","i","randomPlaceA","Math","ceil","random","randomPlaceB","tempCard","tempPCDB","playerCardDB","tempCCDB","CompCardDB","nextCard2","winLose1","playagain2","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cae8fef8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router';\r\n\r\nexport default class Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n\r\n            enteredName: ''\r\n\r\n        }\r\n    }\r\n\r\n    nameEnter = (ev) => {\r\n\r\n        let name = ev.target.value\r\n\r\n        this.setState({ enteredName: name })\r\n\r\n\r\n\r\n    }\r\n\r\n    login = () => {\r\n\r\n        if (this.state.enteredName.length === 0) {\r\n\r\n            console.log('no name was entered');\r\n\r\n            var status = \"\"\r\n\r\n        } else {\r\n\r\n            status = 'warroom'\r\n            this.props.login1(status, this.state.enteredName)\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.props.redirect1 === 'warroom') {\r\n\r\n            return <Redirect push to=\"/warroom\" />;\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n\r\n                <div>Ready for War</div>\r\n\r\n                <div>\r\n                    <input\r\n                        onChange={this.nameEnter} type='text'>\r\n                    </input>\r\n\r\n\r\n                </div>\r\n\r\n                <div>\r\n\r\n\r\n                    <button\r\n                        onClick={this.login}\r\n                    >\r\n                        log in\r\n                    </button>\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router';\r\n\r\nexport default class WarRoom extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n            cardInd: 0,\r\n\r\n            compPoints: 0,\r\n\r\n            playerPoints: 0,\r\n\r\n            redirect: false,\r\n\r\n        }\r\n    }\r\n\r\n    nextCard = () => {\r\n\r\n        console.log('next card');\r\n\r\n        let tempCardInd = this.state.cardInd\r\n\r\n        tempCardInd++\r\n\r\n        let compCard = this.props.CompCardDB1[this.state.cardInd]\r\n        let playerCard = this.props.playerCardDB1[this.state.cardInd]\r\n\r\n        var tempCompPoints = this.state.compPoints\r\n        var tempPlayerPoints = this.state.playerPoints\r\n\r\n        if (compCard > playerCard) {\r\n\r\n            tempCompPoints++\r\n            this.setState({ compPoints: tempCompPoints })\r\n\r\n        } else if (compCard < playerCard) {\r\n\r\n            tempPlayerPoints++\r\n            this.setState({ playerPoints: tempPlayerPoints })\r\n        }\r\n\r\n        this.setState({ cardInd: tempCardInd })\r\n\r\n        if (this.state.cardInd === 3) {\r\n\r\n            console.log(tempCompPoints);\r\n            console.log(tempPlayerPoints);\r\n\r\n            if (tempPlayerPoints > tempCompPoints) {\r\n\r\n                var winLose = 'win'\r\n\r\n            } else if (tempPlayerPoints < tempCompPoints) {\r\n\r\n               winLose = 'lose'\r\n\r\n            } else {\r\n\r\n               winLose = 'draw'\r\n\r\n            }\r\n\r\n\r\n            var status = 'endpage'\r\n            this.props.nextCard1(status, winLose)\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        if (this.props.redirect1 === 'endpage') {\r\n\r\n            return <Redirect push to=\"/endpage\" />;\r\n\r\n        }\r\n\r\n        return (\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n\r\n                <div>\r\n                    <div>computer points {this.state.compPoints}</div>\r\n\r\n                    <div>card {this.props.CompCardDB1[this.state.cardInd]}</div>\r\n\r\n                    <div>card {this.props.playerCardDB1[this.state.cardInd]}</div>\r\n\r\n                    <div style={{ display: 'flex', msFlexDirection: 'row' }}>\r\n                        <button onClick={this.nextCard}>next</button>\r\n\r\n                        <div>your points {this.state.playerPoints}</div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router';\r\n\r\nexport default class EndPage extends Component {\r\n\r\n    playagain = () => {\r\n\r\n        this.props.playagain1()\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        if (this.props.redirect1 === 'warroom') {\r\n\r\n            return <Redirect push to=\"/warroom\" />;\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n\r\n                win {this.props.playerDB1.victoryNum}\r\n                lose {this.props.playerDB1.lossesNum}\r\n\r\n                <button onClick={this.playagain}>again</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport Login from './Components/Login.js'\nimport WarRoom from './Components/WarRoom.js'\nimport EndPage from './Components/EndPage.js'\nimport './App.css';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n\n      playerDB: [],\n\n      totalCardDB: [],\n      playerCardDB: [],\n      CompCardDB: [],\n\n      redirect: \"\",\n\n    }\n  }\n\n  login2 = (status1, enteredName1) => {\n\n    this.setState({ redirect: status1 })\n\n    let tempPDB = [...this.state.playerDB]\n\n    tempPDB = {\n      playerName: enteredName1,\n      victoryNum: 0,\n      lossesNum: 0,\n      playNum: 0\n    }\n\n    this.setState({ playerDB: tempPDB })\n\n    this.shuffle()\n\n  }\n\n  shuffle = () => {\n\n    console.log('shuffle');\n\n    let tempTCDB = [...this.state.totalCardDB]\n\n    for (let j = 0; j < 4; j++) {\n\n      for (let i = 0; i < 13; i++) {\n\n        tempTCDB.push(i + 1)\n\n      }\n\n    }\n\n    \n\n    for (let i = 0; i < 50; i++) {\n\n      let randomPlaceA = Math.ceil(Math.random() * 52 - 1)\n      let randomPlaceB = Math.ceil(Math.random() * 52 - 1)\n\n      let tempCard = tempTCDB[randomPlaceA]\n      tempTCDB[randomPlaceA] = tempTCDB[randomPlaceB]\n      tempTCDB[randomPlaceB] = tempCard\n\n    }\n\n    let tempPCDB = [...this.state.playerCardDB]\n    let tempCCDB = [...this.state.CompCardDB]\n\n    for (let i = 0; i < 26; i++) {\n\n      tempPCDB.push(tempTCDB[i])\n      tempCCDB.push(tempTCDB[51 - i])\n\n    }\n\n    this.setState({ totalCardDB: tempTCDB })\n    this.setState({ playerCardDB: tempPCDB })\n    this.setState({ CompCardDB: tempCCDB })\n\n  }\n\n  nextCard2 = (status1, winLose1) => {\n\n    let tempPDB = this.state.playerDB\n    tempPDB.playNum++\n\n    if (winLose1 === 'win') {\n\n      console.log('win');\n      tempPDB.victoryNum++\n\n    } else if (winLose1 === 'lose') {\n\n      console.log('lose');\n      tempPDB.lossesNum++\n\n    } else if (winLose1 === 'draw') {\n\n      console.log('draw');\n\n    }\n\n    this.setState({ redirect: status1 })\n    this.setState({ playerDB: tempPDB })\n    this.setState({ totalCardDB: [] })\n    this.setState({ playerCardDB: [] })\n    this.setState({ CompCardDB: [] })\n\n  }\n\n  playagain2 = () => {\n\n    this.setState({ redirect: 'warroom' })\n\n    this.shuffle()\n\n  }\n\n\n\n  render() {\n    return (\n      <div>\n\n        <Router>\n\n          <Switch>\n\n            <Route exact path='/' component={() => {\n              return <Login\n                login1={this.login2}\n\n                redirect1={this.state.redirect}\n              />\n            }} />\n            <Route exact path='/warroom' component={() => {\n              return <WarRoom\n                nextCard1={this.nextCard2}\n\n                playerCardDB1={this.state.playerCardDB}\n                CompCardDB1={this.state.CompCardDB}\n                redirect1={this.state.redirect}\n\n              />\n            }} />\n            <Route exact path='/endpage' component={() => {\n              return <EndPage\n                playagain1={this.playagain2}\n\n\n                playerDB1={this.state.playerDB}\n                redirect1={this.state.redirect}\n\n\n              />\n            }} />\n\n\n\n          </Switch>\n\n        </Router>\n\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}